---
import { cn } from '~/utils/utils';

interface TagProps {
    tags?: string[];
    maxVisible?: number;
    compact?: boolean;
    variant?: 'default' | 'colored' | 'outlined' | 'minimal';
    size?: 'sm' | 'md' | 'lg';
}

const { 
    tags = [], 
    maxVisible = 3,
    compact = false,
    variant = 'default',
    size = 'sm'
} = Astro.props as TagProps;

// 计算可见和剩余标签
const visibleTags = tags.slice(0, maxVisible);
const remainingTags = tags.slice(maxVisible);

// 精致的色彩主题配置 - Linear风格
const colorThemes = [
    {
        bg: 'bg-blue-50/80 dark:bg-blue-950/40',
        text: 'text-blue-700 dark:text-blue-300',
        border: 'border-blue-200/50 dark:border-blue-800/30',
        hover: 'hover:bg-blue-100/80 dark:hover:bg-blue-900/50',
    },
    {
        bg: 'bg-emerald-50/80 dark:bg-emerald-950/40',
        text: 'text-emerald-700 dark:text-emerald-300',
        border: 'border-emerald-200/50 dark:border-emerald-800/30',
        hover: 'hover:bg-emerald-100/80 dark:hover:bg-emerald-900/50',
    },
    {
        bg: 'bg-purple-50/80 dark:bg-purple-950/40',
        text: 'text-purple-700 dark:text-purple-300',
        border: 'border-purple-200/50 dark:border-purple-800/30',
        hover: 'hover:bg-purple-100/80 dark:hover:bg-purple-900/50',
    },
    {
        bg: 'bg-amber-50/80 dark:bg-amber-950/40',
        text: 'text-amber-700 dark:text-amber-300',
        border: 'border-amber-200/50 dark:border-amber-800/30',
        hover: 'hover:bg-amber-100/80 dark:hover:bg-amber-900/50',
    },
    {
        bg: 'bg-rose-50/80 dark:bg-rose-950/40',
        text: 'text-rose-700 dark:text-rose-300',
        border: 'border-rose-200/50 dark:border-rose-800/30',
        hover: 'hover:bg-rose-100/80 dark:hover:bg-rose-900/50',
    },
];

// 尺寸配置
const sizeClasses = {
    sm: compact ? 'text-[10px] px-2 py-0.5 h-5' : 'text-xs px-2.5 py-1 h-6',
    md: compact ? 'text-xs px-2.5 py-1 h-6' : 'text-sm px-3 py-1.5 h-7',
    lg: compact ? 'text-sm px-3 py-1.5 h-7' : 'text-base px-4 py-2 h-8',
};

// 变体样式
const getVariantClasses = (themeIndex: number) => {
    const theme = colorThemes[themeIndex % colorThemes.length];
    
    switch (variant) {
        case 'colored':
            return cn(
                theme.bg,
                theme.text,
                theme.border,
                theme.hover,
                'border backdrop-blur-sm'
            );
        case 'outlined':
            return cn(
                'bg-transparent backdrop-blur-sm',
                theme.text,
                theme.border,
                'border',
                'hover:bg-gray-50/80 dark:hover:bg-gray-800/50'
            );
        case 'minimal':
            return cn(
                'bg-gray-100/60 dark:bg-gray-800/40',
                'text-gray-600 dark:text-gray-400',
                'border-transparent backdrop-blur-sm',
                'hover:bg-gray-200/60 dark:hover:bg-gray-700/50'
            );
        default:
            return cn(
                theme.bg,
                theme.text,
                'border border-gray-200/40 dark:border-gray-700/40',
                theme.hover,
                'backdrop-blur-sm'
            );
    }
};

const baseTagClasses = cn(
    sizeClasses[size],
    'relative inline-flex items-center justify-center',
    'font-medium rounded-full',
    'transition-all duration-200 ease-out',
    'hover:scale-105',
    'cursor-default select-none',
    'overflow-hidden group'
);

const remainingTagClasses = cn(
    sizeClasses[size],
    'relative inline-flex items-center justify-center',
    'font-medium rounded-full',
    'bg-gray-100/60 dark:bg-gray-800/40',
    'text-gray-500 dark:text-gray-400',
    'border border-gray-200/40 dark:border-gray-700/40',
    'backdrop-blur-sm',
    'transition-all duration-200 ease-out',
    'hover:bg-gray-200/60 dark:hover:bg-gray-700/50',
    'hover:scale-105',
    'cursor-default select-none',
    'overflow-hidden group'
);
---

{tags.length > 0 && (
    <div class={cn(
        'flex flex-wrap items-center',
        compact ? 'gap-1' : 'gap-1.5'
    )}>
        {visibleTags.map((tag, index) => (
            <span
                class={cn(baseTagClasses, getVariantClasses(index))}
                title={tag}
            >
                <span class="relative z-10 truncate max-w-16 sm:max-w-20">
                    {tag}
                </span>
            </span>
        ))}

        {remainingTags.length > 0 && (
            <span
                class={remainingTagClasses}
                title={`还有 ${remainingTags.length} 个标签: ${remainingTags.join(', ')}`}
            >
                <div class="relative z-10 flex items-center gap-1">
                    <svg class="w-2.5 h-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    <span class="font-semibold text-[10px]">{remainingTags.length}</span>
                </div>
            </span>
        )}
    </div>
)}

<style>
    /* 优化文字渲染 */
    span {
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    /* 响应式文本截断 */
    @media (max-width: 640px) {
        .truncate {
            max-width: 3rem;
        }
    }

    /* 减少动画 */
    @media (prefers-reduced-motion: reduce) {
        span {
            transition: none !important;
        }
    }

    /* 触摸设备优化 */
    @media (hover: none) {
        .hover\:scale-105:hover {
            transform: none;
        }
    }

    /* 高对比度模式 */
    @media (prefers-contrast: high) {
        span {
            border-width: 1px;
            font-weight: 600;
        }
    }
</style>