---
import {Icon} from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';
import {trimSlash, getAsset, getHomePermalink, getPermalink} from '~/utils/permalinks';
import type {CallToAction} from '~/types';

interface Link {
    text?: string;
    href?: string;
    ariaLabel?: string;
    icon?: string;
    links?: Link[];
}

export interface Props {
    id?: string;
    isSticky?: boolean;
    isDark?: boolean;
    isFullWidth?: boolean;
    showToggleTheme?: boolean;
    showRssFeed?: boolean;
    showEmail?: boolean;
    position?: string;
}

const {
    id = 'header',
    isSticky = false,
    isDark = false,
    isFullWidth = false,
    showToggleTheme = false,
    showRssFeed = false,
    showEmail = false,
    position = 'center'
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
const links: Array<Link> = [
    {
        text: '首页',
        href: getPermalink('/')
    },
    {
        text: '周刊',
        href: getPermalink('/weekly')
    },
];
const actions: Array<CallToAction> = [];
---

<header
    class:list={[
        'fixed top-0 z-50 w-full transition-all duration-500 ease-out',
        'bg-white/90 dark:bg-gray-900/90',
        'backdrop-blur-md',
        'border-b border-gray-100 dark:border-gray-800',
    ]}
    {...id ? { id } : {}}
    data-header>
    
    <div class:list={['relative mx-auto w-full px-4 sm:px-6 lg:px-8', { 'max-w-7xl': !isFullWidth }]}>
        <div class="flex justify-between items-center h-16">
            
            <!-- Logo 区域 -->
            <div class="flex items-center group">
                <a 
                    class="flex items-center space-x-3 transition-all duration-200 focus:outline-none rounded-lg px-2 py-1" 
                    href={getHomePermalink()}
                    aria-label="回到首页"
                >
                    <!-- Logo 图标容器 -->
                    <div class="relative">
                        <div class="w-8 h-8 bg-gray-900 dark:bg-white rounded-lg flex items-center justify-center transition-all duration-200">
                            <Icon name="tabler:rocket" class="w-5 h-5 text-white dark:text-gray-900" />
                        </div>
                    </div>
                    
                    <!-- 站点名称 -->
                    <div class="hidden sm:block">
                        <h1 class="text-lg font-medium text-gray-900 dark:text-white">
                            我不知道的周刊
                        </h1>
                    </div>
                </a>
            </div>
            
            <!-- 桌面导航 -->
            <nav class="hidden md:flex items-center space-x-1" aria-label="主导航">
                {links.map(({ text, href }) => (
                    <a
                        class:list={[
                            'relative px-3 py-2 rounded-lg font-medium text-sm transition-colors duration-200',
                            'hover:bg-gray-100 dark:hover:bg-gray-800',
                            'focus:outline-none',
                            {
                                'text-gray-900 dark:text-white bg-gray-100 dark:bg-gray-800': href === currentPath,
                                'text-gray-700 dark:text-gray-300': href !== currentPath,
                            },
                        ]}
                        href={href}
                    >
                        <span class="tracking-wide">{text}</span>
                    </a>
                ))}
            </nav>
            
            <!-- 右侧工具栏 -->
            <div class="flex items-center space-x-2 lg:space-x-3">
                
                <!-- RSS 订阅 -->
                {showRssFeed && (
                    <a
                        class="p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors duration-200 focus:outline-none"
                        aria-label="RSS 订阅"
                        href={getAsset('/rss.xml')}
                        target="_blank"
                        rel="noopener"
                    >
                        <Icon name="tabler:rss" class="w-5 h-5" />
                    </a>
                )}
                
                <!-- 主题切换 -->
                {showToggleTheme && (
                    <div class="relative">
                        <ToggleTheme 
                            iconClass="w-5 h-5" 
                            class="p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors duration-200 focus:outline-none"
                        />
                    </div>
                )}
                
                <!-- CTA 按钮 -->
                {actions?.length ? (
                    <div class="hidden sm:flex items-center space-x-2">
                        {actions.map((btnProps) => (
                            <Button
                                variant="primary"
                                size="sm"
                                class="px-4 py-2 text-sm font-medium transition-colors duration-200"
                                {...btnProps}
                            />
                        ))}
                    </div>
                ) : null}
                
                <!-- 移动端菜单按钮 -->
                <div class="md:hidden">
                    <ToggleMenu 
                        class="p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors duration-200 focus:outline-none"
                    />
                </div>
            </div>
        </div>
        
        <!-- 移动端导航菜单 -->
        <nav class="md:hidden hidden absolute top-full left-0 right-0 bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800 shadow-sm" data-mobile-menu>
            <div class="px-4 py-4 space-y-2">
                {links.map(({ text, href }) => (
                    <a
                        class:list={[
                            'block px-4 py-3 rounded-lg font-medium text-base transition-colors duration-200',
                            'hover:bg-gray-100 dark:hover:bg-gray-800',
                            'focus:outline-none',
                            {
                                'text-gray-900 dark:text-white bg-gray-100 dark:bg-gray-800': href === currentPath,
                                'text-gray-700 dark:text-gray-300': href !== currentPath,
                            },
                        ]}
                        href={href}
                    >
                        {text}
                    </a>
                ))}
                
                <!-- 移动端 CTA -->
                {actions?.length ? (
                    <div class="pt-4 border-t border-gray-100 dark:border-gray-800">
                        {actions.map((btnProps) => (
                            <Button
                                variant="primary"
                                size="md"
                                class="w-full justify-center"
                                {...btnProps}
                            />
                        ))}
                    </div>
                ) : null}
            </div>
        </nav>
    </div>
</header>

<!-- 滚动效果和交互脚本 -->
<script>
    function initAdvancedHeader() {
        const header = document.querySelector('[data-header]') as HTMLElement;
        const scrollIndicator = document.querySelector('[data-scroll-indicator]') as HTMLElement;
        const bgEffect = document.querySelector('[data-bg-effect]') as HTMLElement;
        const shimmer = document.querySelector('[data-shimmer]') as HTMLElement;
        const mobileMenu = document.querySelector('[data-mobile-menu]') as HTMLElement;
        const toggleButton = document.querySelector('[data-aw-toggle-menu]') as HTMLElement;
        
        if (!header) return;
        
        let lastScrollY = window.scrollY;
        let isScrolling = false;
        let ticking = false;
        
        // 滚动效果处理
        function updateHeaderOnScroll() {
            const scrollY = window.scrollY;
            const scrollProgress = Math.min(scrollY / 200, 1);
            
            // 更新背景透明度和模糊效果
            if (scrollY > 10) {
                header.style.setProperty('--tw-bg-opacity', '0.9');
                header.style.backdropFilter = 'blur(20px) saturate(180%)';
                
                // 显示顶部指示器
                if (scrollIndicator) {
                    scrollIndicator.style.opacity = scrollProgress.toString();
                }
                
                // 显示背景效果
                if (bgEffect) {
                    bgEffect.style.opacity = (scrollProgress * 0.5).toString();
                }
                
                // 添加阴影
                header.style.boxShadow = `0 4px 20px rgba(0, 0, 0, ${scrollProgress * 0.1})`;
                
            } else {
                header.style.setProperty('--tw-bg-opacity', '0.7');
                header.style.backdropFilter = 'blur(16px) saturate(150%)';
                header.style.boxShadow = 'none';
                
                if (scrollIndicator) scrollIndicator.style.opacity = '0';
                if (bgEffect) bgEffect.style.opacity = '0';
            }
            
            // 滚动方向检测（可选：自动隐藏功能）
            const scrollDelta = scrollY - lastScrollY;
            if (Math.abs(scrollDelta) > 5) {
                if (scrollDelta > 0 && scrollY > 100) {
                    // 向下滚动 - 可以添加隐藏逻辑
                    header.style.transform = 'translateY(-2px)';
                } else {
                    // 向上滚动
                    header.style.transform = 'translateY(0)';
                }
            }
            
            lastScrollY = scrollY;
            ticking = false;
        }
        
        // 节流滚动事件
        function handleScroll() {
            if (!ticking) {
                requestAnimationFrame(updateHeaderOnScroll);
                ticking = true;
            }
        }
        
        // 微光扫描效果
        function triggerShimmer() {
            if (shimmer) {
                shimmer.style.transform = 'translateX(-100%) skewX(-12deg)';
                setTimeout(() => {
                    shimmer.style.transition = 'transform 1s ease-out';
                    shimmer.style.transform = 'translateX(100%) skewX(-12deg)';
                }, 100);
                
                setTimeout(() => {
                    shimmer.style.transition = 'none';
                    shimmer.style.transform = 'translateX(-100%) skewX(-12deg)';
                }, 1100);
            }
        }
        
        // 移动端菜单切换
        function toggleMobileMenu() {
            if (mobileMenu && toggleButton) {
                const isExpanded = toggleButton.getAttribute('aria-expanded') === 'true';
                const newState = !isExpanded;
                
                toggleButton.setAttribute('aria-expanded', newState.toString());
                
                if (newState) {
                    mobileMenu.classList.remove('hidden');
                    mobileMenu.style.opacity = '0';
                    mobileMenu.style.transform = 'translateY(-10px)';
                    
                    requestAnimationFrame(() => {
                        mobileMenu.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
                        mobileMenu.style.opacity = '1';
                        mobileMenu.style.transform = 'translateY(0)';
                    });
                } else {
                    mobileMenu.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
                    mobileMenu.style.opacity = '0';
                    mobileMenu.style.transform = 'translateY(-10px)';
                    
                    setTimeout(() => {
                        mobileMenu.classList.add('hidden');
                    }, 300);
                }
            }
        }
        
        // 事件监听
        window.addEventListener('scroll', handleScroll, { passive: true });
        
        // 移动端菜单事件
        if (toggleButton) {
            toggleButton.addEventListener('click', toggleMobileMenu);
        }
        
        // 点击外部关闭移动端菜单
        document.addEventListener('click', (e) => {
            if (mobileMenu && !mobileMenu.contains(e.target as Node) && !toggleButton?.contains(e.target as Node)) {
                if (!mobileMenu.classList.contains('hidden')) {
                    toggleMobileMenu();
                }
            }
        });
        
        // 定期触发微光效果
        setInterval(triggerShimmer, 8000);
        
        // 初始化
        updateHeaderOnScroll();
        
        // 页面加载完成后触发一次微光效果
        setTimeout(triggerShimmer, 1000);
        
        // 清理函数
        return () => {
            window.removeEventListener('scroll', handleScroll);
        };
    }
    
    // 初始化
    document.addEventListener('DOMContentLoaded', initAdvancedHeader);
    
    // 页面导航时重新初始化
    document.addEventListener('astro:after-swap', initAdvancedHeader);
</script>

<style>
    /* 确保 header 始终固定在顶部 */
    header[data-header] {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 50;
    }
    
    /* 平滑过渡效果 */
    header[data-header] {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* Logo 悬停效果增强 */
    .group:hover .animate-ping {
        animation-duration: 1s;
    }
    
    /* 导航链接悬停效果 */
    nav a {
        position: relative;
        overflow: hidden;
    }
    
    nav a::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }
    
    nav a:hover::before {
        left: 100%;
    }
    
    /* 工具提示样式 */
    .group:hover [class*="tooltip"] {
        opacity: 1;
        transform: translateX(-50%) translateY(0);
    }
    
    /* 移动端菜单动画 */
    [data-mobile-menu] {
        transform-origin: top;
    }
    
    /* 响应式优化 */
    @media (max-width: 768px) {
        header[data-header] {
            backdrop-filter: blur(20px) saturate(180%);
        }
        
        .group h1 {
            font-size: 1.25rem;
        }
    }
    
    /* 高对比度模式 */
    @media (prefers-contrast: high) {
        header[data-header] {
            background: hsl(var(--background)) !important;
            backdrop-filter: none !important;
            border-bottom: 2px solid hsl(var(--border));
        }
        
        nav a:hover {
            background: hsl(var(--primary)) !important;
            color: hsl(var(--primary-foreground)) !important;
        }
    }
    
    /* 减少动画 */
    @media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
        
        [data-shimmer] {
            display: none;
        }
    }
    
    /* 暗色模式特殊处理 */
    .dark header[data-header] {
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }
    
    /* 性能优化 */
    header[data-header],
    nav a,
    [data-shimmer] {
        transform: translateZ(0);
        backface-visibility: hidden;
        perspective: 1000px;
    }
    
    /* 触摸设备优化 */
    @media (hover: none) {
        .hover\:scale-110:hover,
        .hover\:scale-105:hover,
        .hover\:-translate-y-0\.5:hover {
            transform: none;
        }
        
        nav a::before {
            display: none;
        }
    }
</style>